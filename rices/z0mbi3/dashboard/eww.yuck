;; **
;; **       z0mbi3
;; ** z0mbi3.zk@protonmail.com
;; **

;; ** Variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar IMAGEP "../../../assets/profile.svg")

(defpoll ICON :interval "15m" `scripts/weather --icon`)
(defpoll TEMP :interval "15m" `scripts/weather --temp`)
(defpoll HEX :interval "15m" `scripts/weather --hex`)

(defpoll art		:interval "1s"  "music coverloc")
(defpoll title		:interval "1s"  "music title")
(defpoll artist		:interval "1s"  "music artist")
(defpoll playpause	:interval "1s"  "music statusicon")


;; ** Widgets ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget pfp []
     (box :class "launchermenu"
		  :orientation "v"
          :space-evenly "false"
          :halign "center"
          :valign "start"
          (box :style "background-image: url('${IMAGEP}');" 
		  :class "face" 
		  :halign "center")
          (label :text "Welcome z0mbi3"
                 :class "launcher-pfp-label"
                 :halign "center")
          (box :class "launcher-apps"
			   :orientation "h"
               :space-evenly true
               (button :class "launcher-btn"
                       :onclick "firefox & disown"
                       :tooltip "firefox"
                       "󰇧")
               (button :class "launcher-btn"
                       :onclick "termite --hold -t sysfetch -e $HOME/.local/bin/sysfetch & disown"
                       :tooltip "System Fetch"
                       "󰚌")
               (button :class "launcher-btn"
                       :onclick "thunar ~ & disown"
                       :tooltip "Thunar"
                       "")
               (button :class "launcher-btn"
                       :onclick "termite & disown"
                       :tooltip "Terminal"
                       "")
               (button :class "launcher-btn"
                       :onclick "geany & disown"
                       :tooltip "Editor"
                       ""))))

                       
;; weather
(defwidget weather [] 
	(box   :class "weather"  
		   :orientation "v" 
		   :spacing 3 
		   :space-evenly "false" 
		   :vexpand "true" 
		   :hexpand "false" 
		   :valign "start" 
		   :halign "center"
	(label :class "iconweather" 
		   :halign "center" 
		   :valign "center" 
		   :style "color: ${HEX};" 
		   :text ICON)
	(button :timeout "3s" 
			:onclick "scripts/weather --getdata && eww -c ~/.config/bspwm/rices/z0mbi3/dashboard reload" 
			:class "label_temp" 
			:valign "center" 
			:halign "center" "${TEMP}")))
			

(defwidget date [] 
	(box   :class "date" :orientation "v" :valign "start" :space-evenly "false"
		(label :text DAY)
		(label :text POO)
		(label :class "foo" :text FOO)))
(defpoll FOO :interval "6h"  "date '+%d'")  	
(defpoll DAY :interval "6h" "date '+%A'")
(defpoll POO :interval "6h" "date '+%B'")

;;  Music Widgets
(defwidget music [] 
	(box 	:class "music-player"
			:orientation "h" 
		 	:space-evenly "false"
			:spacing 5   
		 	:halign "center"
            :valign "start"
	(box 	:class "album_art" 
		 	:style "background-image: url('${art}');")
	(box 	:orientation "v" 
		 	:space-evenly "false"
		 	:valign "center"
			:halign "center"
		 	:spacing 10 
 	(label  :class "artist"
		 	:limit-width 10
		 	:text title)
	(label  :class "song"
		 	:limit-width 10
		 	:text artist) 
	(box 	:orientation "h"  
		 	:space-evenly "false"
			:valign "center"
			:halign "center"
			:spacing 25
			(button :class "btn_prev" :onclick "music previous" "玲")
			(button :class "btn_play" :onclick "music toggle" playpause)
			(button :class "btn_next" :onclick "music next" "怜")))))


(defwidget system [] 
	(box :class "stats-box" :space-evenly "false" :orientation "v" :valign "start" :spacing 15
			(box :class "stats" :hexpand "false" :vexpand "false" :space-evenly "false"
				(label :tooltip "${round(EWW_CPU.avg, 0)}%" :class "stats-icon-cpu" :text "")
				(scale :min 0 :max 101 :active false :value {EWW_CPU.avg} :class "scale-cpu" :width 234))
			(box :class "stats" :hexpand "false" :vexpand "false" :space-evenly "false"
				(label :tooltip "${round(EWW_RAM.used_mem_perc, 0)}%" :class "stats-icon-ram" :text "﬙")
				(scale :min 0 :max 101 :active false :value {EWW_RAM.used_mem_perc} :class "scale-ram" :width 234))
			(box :class "stats" :hexpand "false" :vexpand "false" :space-evenly "false"
				(label :tooltip "${round(EWW_DISK["/"].used_perc, 0)}%" :class "stats-icon-fs" :text "")
				(scale :min 0 :max 101 :active false :value {(EWW_DISK["/"].used / EWW_DISK["/"].total) * 100} :class "scale-fs" :width 234)))) 

;; ** Windows ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwindow sidebar
    :geometry (geometry :x "6%"
                        :y "0px"
                        :width "325px"
                        :height "595px"
                        :anchor "left center"
						:stacking "fg")
(sidebar))

;; background
(defwidget sidebar [] 
	(box :class "sidebar"))


(defwindow pfp
    :geometry (geometry :x "7%"
                        :y "-220px"
                        :width "100px"
                        :height "100px"
                        :anchor "left center"
						:stacking "fg")
(pfp))

(defwindow weather
    :geometry (geometry :x "17%"
                        :y "-10%"
                        :width "100px"
                        :height "100px"
                        :anchor "left center"
						:stacking "fg")
(weather))

(defwindow date
    :geometry (geometry :x "7%"
                        :y "-10%"
                        :width "100px"
                        :height "100px"
                        :anchor "left center"
						:stacking "fg")
(date))

(defwindow music
    :geometry (geometry :x "7%"
                        :y "55px"
                        :width "100px"
                        :height "100px"
                        :anchor "left center"
						:stacking "fg")
(music))

(defwindow system
    :geometry (geometry :x "7%"
                        :y "205px"
                        :width "100px"
                        :height "100px"
                        :anchor "left center"
						:stacking "fg")
(system))
